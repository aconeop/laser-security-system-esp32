---
title: "Sistema de Alerta de Seguridad Láser"
subtitle: "Propuesta y Desarrollo en ESP32"
format:
  revealjs: 
    multiplex: true
    theme: ["dark.scss"]
    slide-number: true
    incremental: true
author:
  - Andres Coneo Pretelt, Maximiliano Vargas Montoya, Felipe Madrigal Hoyos, Carolina Lopera
---

## Identificación del Problema

### ¿Cuál es el problema?

Necesidad de un sistema de seguridad fiable y eficiente para proteger espacios de intrusos.

-   La falta de sistemas de detección automáticos.
-   Incremento de robos o intrusiones no detectadas a tiempo.
-   El diseño debe ser eficaz, rápido y accesible, para evitar daños o pérdidas.

## Solución Propuesta

Sistema de **seguridad láser** basado en un **sensor LDR** (resistencia dependiente de la luz) y un **buzzer**.

*Funcionamiento*:

-   El LDR detecta interrupciones en el haz láser.
-   Si el haz es interrumpido, activa la alarma (buzzer) y notifica al usuario.

*Hardware*:

-   Usamos un **ESP32** para la gestión de los pines de entrada y salida.

## Análisis de las Soluciones

#### ¿Por qué C y no MicroPython?

*Ventajas del ESP32 con C*:

-   **Optimización**, C es más eficiente para manejar tareas en tiempo real y sistemas embebidos como el ESP32.
-   **Rendimiento**, Menor consumo de recursos en comparación con MicroPython, lo que es crucial para dispositivos de bajo consumo.
-   MicroPython puede ser más accesible para prototipos, pero C aprovecha mejor el hardware del **ESP32**, especialmente en un entorno de producción.

## Análisis de las Soluciones

::: columns
::: {.column width="50%"}
MicroPython

```{python}
#| eval: false
#| echo: true
from machine import Pin
from time import sleep

# Definir los pines
LDR_PIN = 34  # Pin conectado al DO del LDR
BUZZER_PIN = 26  # Pin conectado al buzzer

# Configurar el pin del LDR como entrada
ldr = Pin(LDR_PIN, Pin.IN)

# Configurar el pin del buzzer como salida
buzzer = Pin(BUZZER_PIN, Pin.OUT)

while True:
    # Leer el estado del LDR
    ldr_state = ldr.value()

    if ldr_state == 1:  # Si el láser está interrumpido
        buzzer.on()  # Activa el buzzer
        print("Seguridad comprometida! Alarma activada, se metieron los ladrones!")
    else:
        buzzer.off()  # Apaga el buzzer
        print("Laser activo, sistema protegido.")

    # Pausa breve para evitar saturar el procesador
    sleep(0.1)
```
:::

::: {.column width="50%"}
C

```{C}
#| eval: false
#| echo: true
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"

// Definir los pines
#define LDR_PIN GPIO_NUM_34    // Pin conectado al DO del LDR
#define BUZZER_PIN GPIO_NUM_26 // Pin conectado al buzzer

void app_main(void) {
    // Configurar el pin del LDR como entrada
    gpio_config_t ldr_config = {
        .pin_bit_mask = (1ULL << LDR_PIN),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&ldr_config);

    // Configurar el pin del buzzer como salida
    gpio_config_t buzzer_config = {
        .pin_bit_mask = (1ULL << BUZZER_PIN),
        .mode = GPIO_MODE_OUTPUT,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&buzzer_config);

    while (1) {
        // Leer el estado del LDR
        int ldr_state = gpio_get_level(LDR_PIN);

        if (ldr_state == 1) { // Si el láser está interrumpido
            gpio_set_level(BUZZER_PIN, 1); // Activa el buzzer
            printf("Seguridad comprometida! Alarma activada, se metieron los ladrones!\n");
        } else {
            gpio_set_level(BUZZER_PIN, 0); // Apaga el buzzer
            printf("Laser activo, sistema protegido.\n");
        }

        // Pausa breve para evitar saturar el procesador
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

```
:::
::::

## Funcionamiento Detallado

![Diagrama de Conexiones](https://raw.githubusercontent.com/aconeop/laser-security-system-esp32/refs/heads/main/img/esquema.png)

<small>

1.  LDR Detecta la Luz: Si el láser está interrumpido, el LDR devuelve un valor de alto.

2.  Alarma Activada: Si se detecta una interrupción, el buzzer se activa y el sistema notifica al usuario.

3.  Normalización: Si no hay interrupción, el sistema permanece en su estado "protegido

</small>

## Resultados de la Solución

-   Funciona eficazmente al detectar interrupciones en el haz láser?
-   El buzzer se activa correctamente?

##### Plan de Mejoras:

-   Integración con sistemas de monitoreo remoto (por ejemplo, usando WiFi o Bluetooth).
-   Implementación de una interfaz gráfica para monitorear el estado del sistema.

## Conclusiones

-   El sistema de **seguridad láser** propuesto es funcional y ofrece una solución eficaz para detectar intrusiones en tiempo real.
-   La implementación en **C** para el ESP32 optimiza el rendimiento y la fiabilidad.
-   Gran escalabilidad.
